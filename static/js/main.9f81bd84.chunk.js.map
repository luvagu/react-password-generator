{"version":3,"sources":["App.jsx","index.jsx"],"names":["App","useState","numOfChars","setNumOfChars","dysplayPassword","setDysplayPassword","options","setOptions","isCopied","setIsCopied","isGenerated","setIsGenerated","handleChage","e","prevOptions","target","id","checked","className","onSubmit","preventDefault","password","includeUppercase","includeNumbers","includeSymbols","getAsciiCharacters","from","to","codes","i","push","LowerCaseCodes","UpperCaseCodes","NumbersCodes","SymbolsCodes","passwordCharCodes","String","fromCharCode","Math","floor","random","length","join","generatePassword","uppercase","numbers","symbols","htmlFor","type","min","max","value","onChange","parseInt","onClick","navigator","clipboard","writeText","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAiIeA,MA/Ef,WACC,MAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA8CF,mBAAS,YAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KACA,EAAsCR,oBAAS,GAA/C,mBAAOS,EAAP,KAAoBC,EAApB,KAkBMC,EAAc,SAAAC,GACnBN,GAAW,SAAAO,GAAW,kCAClBA,GADkB,kBAEpBD,EAAEE,OAAOC,GAAKH,EAAEE,OAAOE,cAS1B,OACC,sBAAKC,UAAU,YAAf,UACC,oBAAIA,UAAU,QAAd,gCACA,oBAAIA,UAAU,mBAAd,SAAkCd,IAClC,uBAAMc,UAAU,cAAcC,SAhCX,SAAAN,GACpBA,EAAEO,iBAEFT,GAAe,GACfF,GAAY,GAEZ,IAAMY,EA7DiB,WAKnB,IAJLnB,EAII,uDAJS,EACboB,EAGI,wDAFJC,EAEI,wDADJC,EACI,wDAGEC,EAAqB,SAACC,EAAMC,GAEjC,IADA,IAAMC,EAAQ,GACLC,EAAIH,EAAMG,GAAKF,EAAIE,IAC3BD,EAAME,KAAKD,GAEZ,OAAOD,GAGFG,EAAiBN,EAAmB,GAAI,KACxCO,EAAiBP,EAAmB,GAAI,IACxCQ,EAAeR,EAAmB,GAAI,IACtCS,EAAY,sBACdT,EAAmB,GAAI,KADT,YAEdA,EAAmB,GAAI,KAFT,YAGdA,EAAmB,GAAI,KAHT,YAIdA,EAAmB,IAAK,OAGxBU,EAAoBJ,EAEpBT,IACHa,EAAiB,sBAAOA,GAAP,YAA6BH,KAC3CT,IACHY,EAAiB,sBAAOA,GAAP,YAA6BF,KAC3CT,IACHW,EAAiB,sBAAOA,GAAP,YAA6BD,KAI/C,IAFA,IAAMb,EAAW,GAERQ,EAAI,EAAGA,EAAI3B,EAAY2B,IAC/BR,EAASS,KACRM,OAAOC,aACNF,EAAkBG,KAAKC,MAAMD,KAAKE,SAAWL,EAAkBM,WAKlE,OAAOpB,EAASqB,KAAK,IAgBHC,CAChBzC,EACAI,EAAQsC,UACRtC,EAAQuC,QACRvC,EAAQwC,SAGTzC,EAAmBgB,IAmBlB,UACC,uBAAO0B,QAAQ,cAAf,mCACA,sBAAK7B,UAAU,qBAAf,UACC,uBACC8B,KAAK,QACLhC,GAAG,cACHiC,IAAI,IACJC,IAAI,KACJC,MAAOjD,EACPkD,SAAU,SAAAvC,GAAC,OAAIV,EAAckD,SAASxC,EAAEE,OAAOoC,WAEhD,uBACCH,KAAK,SACLhC,GAAG,cACHiC,IAAI,IACJC,IAAI,KACJC,MAAOjD,EACPkD,SAAU,SAAAvC,GAAC,OAAIV,EAAckD,SAASxC,EAAEE,OAAOoC,SAC/CjC,UAAU,oBAGZ,uBAAO6B,QAAQ,YAAf,+BACA,uBAAOC,KAAK,WAAWhC,GAAG,YAAYoC,SAAUxC,IAChD,uBAAOmC,QAAQ,UAAf,6BACA,uBAAOC,KAAK,WAAWhC,GAAG,UAAUoC,SAAUxC,IAC9C,uBAAOmC,QAAQ,UAAf,6BACA,uBAAOC,KAAK,WAAWhC,GAAG,UAAUoC,SAAUxC,IAC9C,wBAAQoC,KAAK,SAAS9B,UAAU,MAAhC,mDAGCR,GACA,wBAAQsC,KAAK,SAAS9B,UAAU,MAAMoC,QAxClB,WACvBC,UAAUC,UAAUC,UAAUrD,GAC9BK,GAAY,IAsCT,SACED,EAAW,sBAAc,mDCpHhCkD,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,W","file":"static/js/main.9f81bd84.chunk.js","sourcesContent":["import { useState } from 'react'\n\nconst generatePassword = (\n\tnumOfChars = 8,\n\tincludeUppercase = false,\n\tincludeNumbers = false,\n\tincludeSymbols = false\n) => {\n\t// ASCII Character Codes Arrays\n\t// source: https://www.petefreitag.com/cheatsheets/ascii-codes/\n\tconst getAsciiCharacters = (from, to) => {\n\t\tconst codes = []\n\t\tfor (let i = from; i <= to; i++) {\n\t\t\tcodes.push(i)\n\t\t}\n\t\treturn codes\n\t}\n\n\tconst LowerCaseCodes = getAsciiCharacters(97, 122)\n\tconst UpperCaseCodes = getAsciiCharacters(65, 90)\n\tconst NumbersCodes = getAsciiCharacters(48, 57)\n\tconst SymbolsCodes = [\n\t\t...getAsciiCharacters(33, 47),\n\t\t...getAsciiCharacters(58, 64),\n\t\t...getAsciiCharacters(91, 96),\n\t\t...getAsciiCharacters(123, 126),\n\t]\n\n\tlet passwordCharCodes = LowerCaseCodes\n\n\tif (includeUppercase)\n\t\tpasswordCharCodes = [...passwordCharCodes, ...UpperCaseCodes]\n\tif (includeNumbers)\n\t\tpasswordCharCodes = [...passwordCharCodes, ...NumbersCodes]\n\tif (includeSymbols)\n\t\tpasswordCharCodes = [...passwordCharCodes, ...SymbolsCodes]\n\n\tconst password = []\n\n\tfor (let i = 0; i < numOfChars; i++) {\n\t\tpassword.push(\n\t\t\tString.fromCharCode(\n\t\t\t\tpasswordCharCodes[Math.floor(Math.random() * passwordCharCodes.length)]\n\t\t\t)\n\t\t)\n\t}\n\n\treturn password.join('')\n}\n\nfunction App() {\n\tconst [numOfChars, setNumOfChars] = useState(8)\n\tconst [dysplayPassword, setDysplayPassword] = useState('password')\n\tconst [options, setOptions] = useState({})\n\tconst [isCopied, setIsCopied] = useState(false)\n\tconst [isGenerated, setIsGenerated] = useState(false)\n\n\tconst handleSubmit = e => {\n\t\te.preventDefault()\n\n\t\tsetIsGenerated(true)\n\t\tsetIsCopied(false)\n\n\t\tconst password = generatePassword(\n\t\t\tnumOfChars,\n\t\t\toptions.uppercase,\n\t\t\toptions.numbers,\n\t\t\toptions.symbols\n\t\t)\n\n\t\tsetDysplayPassword(password)\n\t}\n\n\tconst handleChage = e => {\n\t\tsetOptions(prevOptions => ({\n\t\t\t...prevOptions,\n\t\t\t[e.target.id]: e.target.checked,\n\t\t}))\n\t}\n\n\tconst copyToClipboard = () => {\n\t\tnavigator.clipboard.writeText(dysplayPassword)\n\t\tsetIsCopied(true)\n\t}\n\n\treturn (\n\t\t<div className='container'>\n\t\t\t<h1 className='title'>Password Generator</h1>\n\t\t\t<h3 className='display-password'>{dysplayPassword}</h3>\n\t\t\t<form className='form-fields' onSubmit={handleSubmit}>\n\t\t\t\t<label htmlFor='rangeNumber'>Number of Characters:</label>\n\t\t\t\t<div className='input-range-number'>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype='range'\n\t\t\t\t\t\tid='rangeNumber'\n\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\tmax='50'\n\t\t\t\t\t\tvalue={numOfChars}\n\t\t\t\t\t\tonChange={e => setNumOfChars(parseInt(e.target.value))}\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype='number'\n\t\t\t\t\t\tid='rangeNumber'\n\t\t\t\t\t\tmin='1'\n\t\t\t\t\t\tmax='50'\n\t\t\t\t\t\tvalue={numOfChars}\n\t\t\t\t\t\tonChange={e => setNumOfChars(parseInt(e.target.value))}\n\t\t\t\t\t\tclassName='number-input'\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<label htmlFor='uppercase'>Include Uppercase</label>\n\t\t\t\t<input type='checkbox' id='uppercase' onChange={handleChage} />\n\t\t\t\t<label htmlFor='numbers'>Include Numbers</label>\n\t\t\t\t<input type='checkbox' id='numbers' onChange={handleChage} />\n\t\t\t\t<label htmlFor='symbols'>Include Symbols</label>\n\t\t\t\t<input type='checkbox' id='symbols' onChange={handleChage} />\n\t\t\t\t<button type='submit' className='btn'>\n\t\t\t\t\tGenerate Secure Password üîí\n\t\t\t\t</button>\n\t\t\t\t{isGenerated && (\n\t\t\t\t\t<button type='button' className='btn' onClick={copyToClipboard}>\n\t\t\t\t\t\t{isCopied ? 'Copied ‚úîÔ∏è' : 'Copy Password To Clipboard üìã'}\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n"],"sourceRoot":""}